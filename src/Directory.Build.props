<Project>
    <PropertyGroup>
        <SolutionDir Condition="'$(SolutionDir)'==''">$(MSBuildThisFileDirectory)</SolutionDir>
    </PropertyGroup>

    <PropertyGroup>
        <!-- CA1014:  CLS compliance is no longer a must, even some MS .NET Core is not anymore enforcing it -->
        <!-- CA1032:  There should be no dead code, that applies to exception classes too -->
        <!-- CA1034:  Public nested types is a preference, many folks at MS, or even Jimmy Boggard acknowledge that -->
        <!-- CA1062:  Does not recognize scenarios where arguments are not null, see: https://github.com/dotnet/roslyn-analyzers/issues/2877 -->
        <!-- CA1303:  All our tools are English only, we don't need to localize any string -->
        <!-- RCS1194: We should only implement exception constructors we use, we don't want dead code -->
        <!-- S1135:   Already covered by MA0026 -->
        <!-- SA1600:  Elements Must Be Documented-->
        <NoWarn>CA1014;CA1032;CA1034;CA1062;CA1303;RCS1194;S1135;SA1600</NoWarn>

        <!-- MA0025: NotImplementedException are like TODOs they should be warning only -->
        <!-- MA0026: We know TODO items should be tackled, let's not create Errors for them -->
        <!-- S1185:  We know TODO items should be tackled, let's not create Errors for them -->
        <WarningsNotAsErrors>MA0025;MA0026</WarningsNotAsErrors>

        <!-- See https://github.com/dotnet/roslyn/blob/a6013f3213c902c0973b2d371c3007217d610533/docs/compilers/CSharp/Warnversion%20Warning%20Waves.md -->
        <WarningLevel>9999</WarningLevel>

        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <AnalysisMode>AllEnabledByDefault</AnalysisMode>
        <AnalysisLevel>latest</AnalysisLevel>
        <EnforceCodeStyleInBuild>false</EnforceCodeStyleInBuild>
        <LangVersion>latest</LangVersion>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <IsPackable>true</IsPackable>
        <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
        <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
        <SignAssembly>false</SignAssembly>
        <TargetFramework>net9.0</TargetFramework>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <PackageProjectUrl>https://github.com/SyntaxInspectors/SyntaxInspectors.Analyzers</PackageProjectUrl>
        <RepositoryUrl>https://github.com/SyntaxInspectors/SyntaxInspectors.Analyzers</RepositoryUrl>

        <!-- See https://www.meziantou.net/csharp-compiler-strict-mode.htm -->
        <Features>strict</Features>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Meziantou.Analyzer" Version="2.0.222">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="SonarAnalyzer.CSharp" Version="10.15.0.120848">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.4">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Roslynator.Analyzers" Version="4.14.0">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Roslynator.CodeAnalysis.Analyzers" Version="4.14.0">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <ItemGroup>
        <AdditionalFiles Include="$(SolutionDir)BannedSymbols.txt"/>
    </ItemGroup>

    <ItemGroup Condition="'$(IsTestProject)' == 'true'">
        <PackageReference Include="Shouldly" Version="4.3.0"/>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.14.1"/>
        <PackageReference Include="xunit.v3" Version="3.1.0"/>
        <PackageReference Include="xunit.runner.visualstudio" Version="3.1.5" privateAssets="all"/>
        <PackageReference Include="JunitXml.TestLogger" Version="6.1.0"/>
        <PackageReference Include="coverlet.collector" Version="6.0.4">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <Target Name="AddInternalsVisibleTo" BeforeTargets="BeforeCompile">
        <!-- Add default suffix if there is no InternalsVisibleTo or InternalsVisibleToSuffix defined -->
        <ItemGroup Condition="@(InternalsVisibleToSuffix->Count()) == 0 AND @(InternalsVisibleTo->Count()) == 0">
            <InternalsVisibleToSuffix Include=".Tests"/>
        </ItemGroup>

        <!-- Handle InternalsVisibleTo -->
        <ItemGroup Condition="'@(InternalsVisibleTo->Count())' &gt; 0">
            <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
                <_Parameter1>%(InternalsVisibleTo.Identity)</_Parameter1>
            </AssemblyAttribute>
        </ItemGroup>

        <!-- Handle InternalsVisibleToSuffix -->
        <ItemGroup Condition="@(InternalsVisibleToSuffix->Count()) &gt; 0">
            <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
                <_Parameter1>$(AssemblyName)%(InternalsVisibleToSuffix.Identity)</_Parameter1>
            </AssemblyAttribute>
        </ItemGroup>
    </Target>
</Project>
